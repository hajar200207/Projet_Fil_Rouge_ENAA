pipeline {
    agent { label 'any' }

    tools {
        maven 'mvn'
    }

    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub'
        SONARQUBE_CREDENTIALS = 'squ_d93b34ca0f9d60ee783d2f4df696782060815072'
        TAG_VERSION = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/hajar200207/Projet_Fil_Rouge_ENAA.git'
            }
        }

        stage('Build & Test conference-management') {
            steps {
                dir('conference-management') {
                    bat 'mvn clean validate'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarQubeScanner'

                    dir('conference-management') {
                        bat "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=conference-management -Dsonar.sources=. -Dsonar.token=${SONARQUBE_CREDENTIALS} -Dsonar.java.binaries=target/classes"
                    }
                }
            }
        }

       stage('Build Docker Image & Push') {
           steps {
               dir('conference-management') {
                   script {
                       def imageName = "hajar/conference-management:${env.TAG_VERSION}"
                       bat "docker build -t ${imageName} ."

                       withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                           bat "echo \$DOCKER_PASS | docker login -u \$DOCKER_USER --password-stdin"
                           bat "docker push ${imageName}"
                       }
                   }
               }
           }
       }
    }

    post {
        always {
            bat 'docker logout'
            cleanWs()
        }
    }
}
