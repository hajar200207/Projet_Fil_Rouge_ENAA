pipeline {
    agent any

    tools {
        maven 'mvn'
        'hudson.plugins.sonar.SonarRunnerInstallation' 'SonarQubeScanner'  // Correction: utilisation du nom complet de l'outil
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        SONARQUBE_CREDENTIALS = credentials('sonarqube-token')
        TAG_VERSION = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build & Test') {
            steps {
                dir('conference-management') {
                    bat 'mvn clean verify'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    dir('conference-management') {
                        bat "mvn sonar:sonar -Dsonar.projectKey=conference-management"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('conference-management') {
                    script {
                        def imageName = "hajar/conference-management:${env.TAG_VERSION}"
                        bat "docker build -t ${imageName} ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def imageName = "hajar/conference-management:${env.TAG_VERSION}"
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        bat "echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin"
                        bat "docker push ${imageName}"
                    }
                }
            }
        }
    }

    post {
        always {
            bat 'docker logout'
            cleanWs()
        }
    }
}